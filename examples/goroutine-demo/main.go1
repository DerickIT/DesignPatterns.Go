package main

import (
	"fmt"
	"sync"
	"time"
)

func process(name string, phase string) {
	time.Sleep(2 * time.Second)
	fmt.Printf("%s has completed %s\n", name, phase)
}

func worker(jobs <-chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	for person := range jobs {
		name := fmt.Sprintf("Person %d", person)
		process(name, "security check")
		process(name, "ticket check")
		process(name, "ID check")
	}
}

func main() {
	start := time.Now()
	const totalPeople = 100
	const concurrentLimit = 10

	jobs := make(chan int, totalPeople)
	var wg sync.WaitGroup

	// 创建工作池
	for i := 0; i < concurrentLimit; i++ {
		wg.Add(1)
		go worker(jobs, &wg)
	}

	// 发送工作
	for i := 1; i <= totalPeople; i++ {
		jobs <- i
	}
	close(jobs)

	wg.Wait()
	elapsed := time.Since(start)
	fmt.Printf("All %d people have completed the process in %v\n", totalPeople, elapsed)
}
