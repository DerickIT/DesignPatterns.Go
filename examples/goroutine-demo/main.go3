package main

import (
	"context"
	"fmt"
	"sync"
	"time"
)

func hulu() {
	a := []int{1, 2, 3}
	b := a[:2]

	b = append(b, 4)
	fmt.Println(a)

	b = append(b, 5)
	fmt.Println(a)
	fmt.Println("b的值为：", b)

	b[0] = 10
	fmt.Println(a)
}

const (
	numWorkers = 3

	numCycles = 100
)

func worker(id int, ch chan int) {
	//defer wg.Done()
	for i := 0; i < numCycles; i++ {
		if <-ch == id {
			fmt.Printf("Worker %d received %d\n", id+1, i)
			ch <- (id + 1) % numWorkers
		}
	}
}

func main() {
	ch := make(chan int, 1)
	ch <- 0
	var wg sync.WaitGroup
	wg.Add(numWorkers)
	for i := 0; i < numWorkers; i++ {
		go func(id int) {
			defer wg.Done()
			worker(id, ch)
		}(i)
		// go worker(i, ch, &wg)
	}
	wg.Wait()
	fmt.Println()
}

func main8() {
	var wg sync.WaitGroup
	ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
	defer cancel()

	for i := 0; i < 1000; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()
			select {
			case <-time.After(2 * time.Second):
				fmt.Println("goroutine", id, "done")
			case <-ctx.Done():
				fmt.Printf("goroutine %d canceled\n", id)
			}
		}(i)
	}

	wg.Wait()
	fmt.Println("main done")
}
